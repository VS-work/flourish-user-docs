[{"body":" This article explains Flourish database structure, database relations, and gives an idea of how to get to work with databases. In addition, this article showshow the most commonly used Tables and Schemas are arranged and describe their structure in detail.\nDatabase levels concept Flourish has three types of Databases: Company Level, Facility Level, and Common\nExample: Client has 1 Cultivation Center and 2 Stores, in Flourish terminology, that means that client has 3 Facilities. Each facility has its own database, resulting in 3 Facility Level databases in total. However, there is a 4-th Company Level database. Company DB contains data thats spans across facilities, i.e items,strains, customers, etc.\nCommon database contains only static data that is shared between Facility and Company databases. It is used, for instance, to perform [Purchase Limits validation]()\nEvery Facility Level database has VIEWS to reference every table at the Company Level.\nLet\u0026rsquo;s say that we have the following:\nCompanyDB: ABC CultivationFacility: DEF StoreFacility: GHI StoreFacility: JKL The item table is defined in CompanyDB ABC, however, we have an item VIEW for DEF, GHI, JKL, which points to ABC.item, which means that following queries all return same data:\nSELECT * from ABC.item; SELECT * from DEF.item; SELECT * from GHI.item; SELECT * from JKL.item; For development purposes use the following databases:\nCompany: 58b9ae9c280e20ea24a126b8\nFacility: 58b9b09d280e20ea24a126bb\nFacility level Grow module tables  plant: one row per plant group_hdr: one row per group group_strain_dtl: one row per group / per strain metrc_plant_batch metrc_plant_batch_dtl harvest_hdr: one row per harvest harvest_strain_dtl: one row per harvest / per strain harvest_dtl: one row per weight entry (can be plant specific) group_harvest: relationship between group_hdr and harvest_hdr  Group Things to remember:\n A group is a grouping of plants that is tracked together; A group can only be in a single location/status at one time; Groups can contain multiple strains;  Tables  group_hdr group_strain_dtl plant  Table Relationships group_hdr (gh) -\u0026gt; plant (p) gh.group_hdr_pk = p.group_hdr_pk* group_hdr (gh) -\u0026gt; group_strain_dtl (gsd) gh.group_hdr_pk = gsd.group_hdr_pk group_strain_dtl (gsd) -\u0026gt; plant (p) gsd.group_hdr_pk = p.group_hdr_pk AND gsd.strain_id = p.strain_id group_strain_dtl.group_hdr_pk Plant batches To accommodate METRC requirements, Flourish team has designed the concept of \u0026ldquo;plant batches\u0026rdquo;, which represent subset of plants that were created at one period of time.\nExample: Anytime someone goes through the process of creating plants Grow -\u0026gt; Clone -\u0026gt; Create Plants, a new plant batch is created.\nThings to know:\n No changes will ever be required to the plant batches design idea; Created batches are stored in the metrc_plant_batch table. Once a plant is associated with a plant batch, its association cannot be changed. Plants can move around and group can be split or combined, so we keep a record of which plant batches belong to which groups using the metrc_plant_batch_group tables.  Tables  metrc_plant_batch metrc_plant_batch_group  Table Relationships plant (p) -\u0026gt; metrc_plant_batch (mpb) p.metrc_plant_batch_id = mpb.metrc_plant_batch_id metrc_plant_batch (mpb) -\u0026gt; metrc_plant_batch_group mpb.metrc_plant_batch_id = mpbg.metrc_plant_batch_id group_hdr (gh) -\u0026gt; metrc_plant_batch_group (mpb) gh.group_hdr_pk = mpbg.group_hdr_pk Harvest Harvests are similar to groups, they represent the same thing: a grouping of plants, the only difference is that they were all harvested together. Once a group is ready, it is then harvested\nNote: Harvests are a different entity than groups.\nThings to know:\n A harvest can contain multiple groups A harvest can contain multiple strains Weights are recorded on harvests and then packages can be created from these weights  Tables  harvest_hdr harvest_strain_dtl harvest_dtl group_harvest  Company Level [TBA]\n","excerpt":"This article explains Flourish database structure, database relations, and gives an idea of how to …","ref":"https://vs-work.github.io/flourish-user-docs/docs/database/","title":"Database Overview"},{"body":" This is the place where Flourish Documentation lives, here you will learn you how to use Flourish products.\n ","excerpt":" This is the place where Flourish Documentation lives, here you will learn you how to use Flourish …","ref":"https://vs-work.github.io/flourish-user-docs/docs/","title":"Documentation"},{"body":"iframe{width:100%}   iFrameResize({ log : true, checkOrigin : false, sizeWidth : true, widthCalculationMethod : 'rightMostElement' }); var shortcode_url = \"https:\\/\\/valor-software.com\\/flourish-api-doc\\/spec.json\"; var shortcode_api_key = \"special-key\";  ","excerpt":"iframe{width:100%}   iFrameResize({ log : true, checkOrigin : false, sizeWidth : true, …","ref":"https://vs-work.github.io/flourish-user-docs/docs/flourish-api/","title":"Flourish API"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/blog/news/","title":"News About Docsy"},{"body":" The following document gives a general overview about the different integration types and Flourish payment process. To learn more about the different payment-related topics follow our [API Documentation](). It will take you to a more detailed description including interactive examples.\nTransaction Process Managing Payment Types List Payment Types To return the list of all available payment types and providers, use following API endpoint:\nName: \u0026#34;GetPaymentTypes\u0026#34;, Method: \u0026#34;GET\u0026#34;, Pattern: \u0026#34;/v1/api/grow/paymenttypes\u0026#34;, as a result, you will receive a list of currently available payment options\nPaymentTypeIDCash = 1 PaymentTypeIDCanPay = 2 PaymentTypeIDCheck = 3 PaymentTypeIDCreditCard = 4 PaymentTypeIDDebitCard = 5 PaymentTypeIDGiftCard = 6 PaymentTypeIDLinx = 7 PaymentTypeIDManual = 8 PaymentTypeIDStoreCredit = 9 PaymentTypeIDStoreCreditIssued = 10  Enabling / Disabling Payment Type To enable or disable certain payment type, use following API requests, where PaymentTypeID is a corresponding number from the list of currently available payment types:\nAPI Enable:\nName: \u0026#34;EnablePaymentType\u0026#34;, Method: \u0026#34;PUT\u0026#34;, Pattern: \u0026#34;/v1/api/grow/paymenttypes/{\u0026#34; + orderPaymentTypeIDKey + \u0026#34;}/enable\u0026#34;, Disable:\nName: \u0026#34;DisablePaymentType\u0026#34;, Method: \u0026#34;PUT\u0026#34;, Pattern: \u0026#34;/v1/api/grow/paymenttypes/{\u0026#34; + orderPaymentTypeIDKey + \u0026#34;}/disable\u0026#34;, LinX LINX is the primary provider of credit and debit merchant processing services for legal cannabis dispensaries in the United States.\nName: \u0026#34;LinxBalanceCheck\u0026#34;, Method: \u0026#34;POST\u0026#34;, Pattern: \u0026#34;/v1/api/payments/linx/balance\u0026#34;,Name: \u0026#34;LinxGetAccessToken\u0026#34;, Method: \u0026#34;GET\u0026#34;, Pattern: \u0026#34;/v1/api/payments/linx/accesstoken\u0026#34;, CanPay CanPay offers payment solutions for the State Regulated Cannabis Industry and other emerging markets\nNo Info Found Manual Payment Manual Payments: Payments that supposed to be transacted with a third-party transaction, via LINX or CanPay, but for one reason or another, they weren\u0026rsquo;t able to be processed in Flourish. The transaction still needs to be recorded in Flourish, and this is possible via Manual Payment.\nTo proceed with Manual Payment, merchant needs to enter the amount of payment received via transaction that needs to be recorded, the date (defaults to today) the transaction occurred, the payment method (either LINX or CanPay), and last, the ID of the transaction that was received.\nAPI To submit a transaction, use following API call:\nName: \u0026#34;PostOrderPaymentTransaction\u0026#34;, Pattern: \u0026#34;/v1/api/grow/customers/{\u0026#34; + customerIDKey + \u0026#34;}/orders/{\u0026#34; + orderIDKey + \u0026#34;}/payment\u0026#34;, Method: \u0026#34;POST\u0026#34;, Important request strings:\n\u0026quot;payment_type_id\u0026quot;: 8, - PaymentTypeID, 8 is Manual \u0026quot;payment_location_id\u0026quot;: 1, - Always 1, stands for InStore \u0026quot;till_id\u0026quot;: 2, - Purchase till number, required for CanPay \u0026amp; Linx \u0026amp; Manual \u0026quot;reference_token\u0026quot;: - \u0026ldquo;LINX\u0026rdquo; or \u0026ldquo;CANPAY\u0026rdquo; \u0026quot;reference_id\u0026quot;: \u0026quot;12345\u0026quot; - Linx or CanPay reference ID\nDataMotio DataMotio is a third party virtual credit card payment solution, that provides the ability to accept credit card payments through a customer handled standard and secured CC terminal / chip reader. Having this functionality allows us to quickly and securely accept credit card payments without needing to handle the customer’s credit card.\nThe DataMotio credit card solution requires two company level sets of credentials, one for the terminal API endpoints and one for the charge endpoints. These are the company level credentials and can be stored directly in the Flourish system with no UI. The Merchant ID is facility specific and can be found in the \u0026ldquo;Payment Methods\u0026rdquo; tab in the facility settings. In this tab it is also possible enable/disable the payment method at a facility.\nAPI To generate payment receipt for DataMotio transaction, use following API call:\nName: \u0026#34;GenerateDataMotioPaymentReceipt\u0026#34;, Method: \u0026#34;GET\u0026#34;, Pattern: BaseFacilityURL + \u0026#34;/transactions/{\u0026#34; + transactionIDKey + \u0026#34;}/datamotio/receipt\u0026#34;, Purchase Order Payment Creation Validation  Valid lot code is required Unit price is required Quantity is required Payment timestamp is required Passed lot code should be valid  Valid Lot Code: lot code is considered valid, if it matches all lot codes of orderlines tied to the payement.\nPost Order Payment Transaction Validation Validation:\n Order ID required Facility ID required Only Cash \u0026amp; Credit Suported payment locations : Only \u0026ldquo;Mobile\u0026rdquo; and \u0026ldquo;In Store\u0026rdquo; Reference Token is required for CanPay method Tills shouldn\u0026rsquo;t be closed LinX:  Reference Token is required (ref token = card number) Customer identification number is required Customer identification type should be \u0026ldquo;Driver License\u0026rdquo; or \u0026ldquo;Passport\u0026rdquo; If customer identification type is \u0026ldquo;Driver License\u0026rdquo; there\u0026rsquo;s should be a drivers license state (CustomerState field in code) If \u0026ldquo;passport\u0026rdquo; there\u0026rsquo;s should be a passport country Customer name is required   ","excerpt":"The following document gives a general overview about the different integration types and Flourish …","ref":"https://vs-work.github.io/flourish-user-docs/docs/pos/payment/payment-methods/","title":"Payments"},{"body":" Purchase Limits This guide will walk through Flourish cannabis purchase limits validation process. Recreational \u0026amp; Medical states all have something in common – they sell weed and each have limits too, restrictions on how much customers can buy on any given day or at any given time, to make sure Flourish legally selling them the amount mandated by law.\nGlossary Purchase Limit are the limits that are established by law for the purchase of goods with the content of cannabis.\nValidation Process Overview There are limits of 2 types, Medical and Recreational. Depending on the status of the custom, such a limit will be applied.\nFacility has limits that are set by state law, so when customer makes a purchase and before he sends it for payment, purchase has to be validated, or otherwise all buttons are going to be hidden.\nWhen customer adds the product to the basket, the \u0026ldquo;Validate\u0026rdquo; button appears. Selecting \u0026ldquo;Validate\u0026rdquo; button sends and API call to compare the amount of cannabis that customer have already bought in the last 24 hours and planning to buy in current purchase.\nIf customer exceeded the limits, then he or she will see an error message, stating that there are too many substances than are allowed.\n![]()\nIf everything is ok, success message and the remaining buttons for working with the order appear.\n![]()\nNote: For Nevada, validation is a little different right now (November, 2019). During validation, the product that was purchased by the customer in the last 24 hours is not added to the quantity of goods in the basket, that is, validation occurs only within the order.\nLimits are set for a certain category of goods. The list of categories can be found below:\n.tg {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;margin:0px auto;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#aabcfe;color:#669;background-color:#e8edff;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#aabcfe;color:#039;background-color:#b9c9fe;} .tg .tg-lboi{border-color:inherit;text-align:left;vertical-align:middle} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} .tg-sort-header::-moz-selection{background:0 0}.tg-sort-header::selection{background:0 0}.tg-sort-header{cursor:pointer}.tg-sort-header:after{content:\u0026ldquo;;float:right;margin-top:7px;border-width:0 5px 5px;border-style:solid;border-color:#404040 transparent;visibility:hidden}.tg-sort-header:hover:after{visibility:visible}.tg-sort-asc:after,.tg-sort-asc:hover:after,.tg-sort-desc:after{visibility:visible;opacity:.4}.tg-sort-desc:after{border-bottom:none;border-width:5px 5px 0}@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;margin: auto 0px;}}  Labeling\nLighting\nll123\nMarijuana Flowers/Buds\nNon-Solvent Based Concentrate\nNon-Solvent Based Concentrate (Each)\nNutrients\nOral Oil\nPackaging\nPackaging Components\nPackaging Container\nPackaging Label\nPots and Trays\nPre-rolled cigs/joints\nPre-Rolls Propagation\nR\u0026amp;D Testing / Homogeneity Testing (Count-base\nR\u0026amp;D Testing / Homogeneity Testing (Weight-bas\nRaw Materials\nRefrigerated\nSeeds\nSeeds (bulk)\nSeeds (each)\nSeeds (weight)\nShake/Trim\nShake/Trim (by strain)\nShake/Trim Approved for Extraction\nSmall/Popcorn Buds\nSoft Gel\nSolvent Based Concentrate\nSolvent Based Concentrate (Each) Supplies\nSuppository\nSuppository (each)\nTerpenes\nTinctures\nTinctures (each)\nTopicals\nTopicals (each)\nTransdermal Patch\nTransdermal Patch (each)\nVape Cartridge\nVaporizer\nWaste\nWet Whole Plant Approved for Extraction\nWhole Harvested Plant\nWhole Wet Plant   var TGSort=window.TGSort||function(n){\u0026ldquo;use strict\u0026rdquo;;function r(n){return n.length}function t(n,t){if(n)for(var e=0,a=r(n);a\u0026gt;e;++e)t(n[e],e)}function e(n){return n.split(\u0026ldquo;\u0026rdquo;).reverse().join(\u0026ldquo;\u0026rdquo;)}function a(n){var e=n[0];return t(n,function(n){for(;!n.startsWith(e);)e=e.substring(0,r(e)-1)}),r(e)}function o(n,r){return-1!=n.map\u0026reg;.indexOf(!0)}function u(n,r){return function(t){var e=\u0026ldquo;\u0026rdquo;;return t.replace(n,function(n,t,a){return e=t.replace(r,\u0026ldquo;\u0026rdquo;)+\u0026ldquo;.\u0026rdquo;+(a||\u0026ldquo;\u0026rdquo;).substring(1)}),l(e)}}function i(n){var t=l(n);return!isNaN(t)\u0026amp;\u0026amp;r(\u0026ldquo;\u0026rdquo;+t)+1\u0026gt;=r(n)?t:NaN}function s(n){var e=[];return t([i,m,g],function(t){var a;r(e)||o(a=n.map(t),isNaN)||(e=a)}),e}function c(n){var t=s(n);if(!r(t)){var o=a(n),u=a(n.map(e)),i=n.map(function(n){return n.substring(o,r(n)-u)});t=s(i)}return t}function f(n){var r=n.map(Date.parse);return o(r,isNaN)?[]:r}function v(n,r){r(n),t(n.childNodes,function(n){v(n,r)})}function d(n){var r,t=[],e=[];return v(n,function(n){var a=n.nodeName;\u0026ldquo;TR\u0026rdquo;==a?(r=[],t.push\u0026reg;,e.push(n)):(\u0026ldquo;TD\u0026rdquo;==a||\u0026ldquo;TH\u0026rdquo;==a)\u0026amp;\u0026amp;r.push(n)}),[t,e]}function p(n){if(\u0026ldquo;TABLE\u0026rdquo;==n.nodeName){for(var e=d(n),a=e[0],o=e[1],u=r(a),i=u\u0026gt;1\u0026amp;\u0026amp;r(a[0])h;++h){for(var N=0;p\u0026gt;N;++N){r(m)n;++n){var r=v[n].classList;r.remove(L),r.remove(E),l[n]=0}};t(v,function(n,t){l[t]=0;var e=n.classList;e.add(\u0026ldquo;tg-sort-header\u0026rdquo;),n.addEventListener(\u0026ldquo;click\u0026rdquo;,function(){function n(n,r){var t=d[n],e=d[r];return t\u0026gt;e?a:e\u0026gt;t?-a:a*(n-r)}var a=l[t];b(),a=1==a?-1:+!a,a\u0026amp;\u0026amp;e.add(a\u0026gt;0?L:E),l[t]=a;var i=m[t],v=function(n,r){return ai[n].localeCompare(i[r])||a(n-r)},d=c(i);(r(d)||r(d=f(i)))\u0026amp;\u0026amp;(v=n);var p=g.slice();p.sort(v);for(var h=null,N=s;u\u0026gt;N;++N)h=o[N].parentNode,h.removeChild(o[N]);for(var N=s;u\u0026gt;N;++N)h.appendChild(o[s+p[N-s]])})})}}var l=parseFloat,m=u(/^(?:\\s)([+-]?(?:\\d+)(?:,\\d{3}))(.\\d)?$/g,/,/g),g=u(/^(?:\\s)([+-]?(?:\\d+)(?:.\\d{3}))(,\\d)?$/g,/./g);n.addEventListener(\u0026ldquo;DOMContentLoaded\u0026rdquo;,function(){for(var t=n.getElementsByClassName(\u0026ldquo;tg\u0026rdquo;),e=0;e\nNote: If the purchase does not contain cannabis goods, then there is no validation.\nAPI Reference Facility-level limits validation HandlerName: GetPurchaseLimitsByFacility\nURL: /v1/api/retail/purchaselimits/facilities/{facility}\nRequestType: GET\nResponse body should returns the following:\n[ { integration_purchase_limit_id: 1, name: \u0026#34;Concentrate\u0026#34;, med_limit: 10, rec_limit: 20, uom_id: 1 }, { integration_purchase_limit_id: 2, name: \u0026#34;Flower\u0026#34;, med_limit: 24, rec_limit: 24, uom_id: 2 } ] SQL to get Facility-level limits information:\nselect integration_purchase_limit_id, name, med_limit, rec_limit, uom_id from common.integration_purchase_limit ipl join facility_integration fi on fi.integration_id = ipl.integration_id where fi.facility_id = \u0026#39;\u0026lt;FAC_ID\u0026gt;\u0026#39;; Order-level limits validation HandlerName: GetPurchaseLimitsByOrder\nURL: /v1/api/retail/purchaselimits/orders/{order}\nRequestType: GET\nResponse body should return the following:\n[ { integration_purchase_limit_id: 1, name: \u0026#34;Concentrate\u0026#34;, qty: 12, uom_id: 1 }, { integration_purchase_limit_id: 2, name: \u0026#34;Flower\u0026#34;, qty: 10, uom_id: 2 } ] SQL to return Order-level limits information:\nselect ipl.integration_purchase_limit_id, ipl.name, sum( CASE WHEN ipl.uom_type = \u0026#39;weight\u0026#39; AND i.standard_qty_uom_id = 1 THEN ol.qty * i.unit_weight * uw.conversion_factor WHEN ipl.uom_type = \u0026#39;volume\u0026#39; AND i.standard_qty_uom_id = 1 THEN ol.qty * i.unit_volume * uv.conversion_factor ELSE ol.qty * usq.conversion_factor END ) qty from order_hdr oh join order_line ol on oh.order_id = ol.order_id join item i on ol.item_id = i.item_id join uom usq on i.standard_qty_uom_id = u.uom_id left outer join uom uw on i.weight_uom_id = uw.uom_id left outer join uom uv on i.volume_uom_id = uw.uom_id join item_category_integration ici on i.item_category_id = ici.item_category_id join common.integration_item_category iic on ici.integration_item_category_id = iic.integration_item_catgory_id join common.integration_purchase_limit ipl on iic.integration_purchase_limit_id = ipl.integration_purchase_limit_id where oh.order_id = ? group by oh.customer_id, ipl.integration_purchase_limit_id; Database reference Puchase Limits database entries are store inside the Common database. To get more information on database structure and relations, please, follow to the [General Database Information]() guide.\nLimits Tables  common.integration common.integration_purchase_limit common.integration_item_category company.item_category company.item_category_integration  Tables Properties \u0026amp; Relations common.integration\n integration_id name — e.g. Metrc California area_type — e.g. State area — e.g. CA integrator_id active — boolean: 1 or 0  common.integration_purchase_limit\n integration_purchase_limit_id integration_id \u0026ndash;\u0026gt; common.integration.integration_id name — Flower, Concentrates, Edibles, common cannabis class med_limit — limit for medical usage rec_limit — limit for recreational usage uom_type — e.g. weight limit_type — e.g thc or cbd  common.integration_item_category\n integration_item_category_id integration_id \u0026ndash;\u0026gt; common.integration.integration_id integration_purchase_limit_id \u0026ndash;\u0026gt; common.integration_purchase_limit.integration_purchase_limit_id description — e.g. Buds external_id — e.g. Buds/Concentrate/Capsule — more specified name for name column from common.integration_purchase_limit active — boolean: 1 or 0 last_sync — date - compliance_info — stores json  compliance_info JSON example:\n{ \u0026#34;QuantityType\u0026#34;: \u0026#34;WeightBased\u0026#34;, \u0026#34;RequiresStrain\u0026#34;: false, \u0026#34;CanBeRemediated\u0026#34;: true, \u0026#34;CanContainSeeds\u0026#34;: true, \u0026#34;RequiresItemBrand\u0026#34;: false, \u0026#34;RequiresUnitVolume\u0026#34;: false, \u0026#34;RequiresUnitWeight\u0026#34;: false, \u0026#34;ProductCategoryType\u0026#34;: \u0026#34;Buds\u0026#34;, \u0026#34;RequiresIngredients\u0026#34;: false, \u0026#34;RequiresServingSize\u0026#34;: false, \u0026#34;RequiresProductPhoto\u0026#34;: false, \u0026#34;RequiresUnitCbdContent\u0026#34;: false, \u0026#34;RequiresUnitCbdPercent\u0026#34;: false, \u0026#34;RequiresUnitThcContent\u0026#34;: false, \u0026#34;RequiresUnitThcPercent\u0026#34;: false, \u0026#34;RequiresSupplyDurationDays\u0026#34;: false, \u0026#34;RequiresAdministrationMethod\u0026#34;: false } company.item_category\n item_category_id item_class_id description — same as external_id from common.integration_item_category e.g. \u0026ldquo;Topicals (each)\u0026rdquo; type_key — one word e.g. topicalseach active — boolean: 1 or 0 uom_type — e.g weight or count metrc_description — same info as in description is_active — same as active, boolean: 1 or 0  company.item_category_integration\nThe table consists entirely of relations to other tables\n item_category_integration_id item_category_id \u0026ndash;\u0026gt; from item_category integration_id \u0026ndash;\u0026gt; from common.integration integration_item_category_id \u0026ndash;\u0026gt; from common.integration_item_category active — boolean: 1 or 0  ","excerpt":"Purchase Limits This guide will walk through Flourish cannabis purchase limits validation process. …","ref":"https://vs-work.github.io/flourish-user-docs/docs/pos/payment/purchase-limits/","title":"Purchase Limits Validation"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/blog/releases/","title":"New Releases"},{"body":" Whether a purchase is made in physical store or online (via Credit Card, LINX, or CanPay) the customer has the option of returning and refunding the sale. This article provides details on the process of each of those transactions.\nGlossary Here are some quick definitions of relevant terms:\n Product Return: is the process of a customer taking previously purchased merchandise back to the retailer, and in turn exchanging for another item (identical or different) or receiving a refund in cash, or a account credit.\n Account credit refunds: Customer may request a full or partial refund of a sale, resulting in the client account balance, that he can spend on future purchases.\n Cash refunds: Customer may request a full or partial refund of a sale in cash, this method helps to increase customer satisfaction.\n Manual Payments: Payments that supposed to be transacted with a third-party transaction (LINX or CanPay), but for one reason or another, they weren\u0026rsquo;t able to be processed in Flourish. The transaction still needs to be recorded in Flourish, and this is possible via Manual Payment\n  Things to know  Returns must be done at the same dispensary that made the initial sale. The PackageLabel needs to be the same as the original sale to maintain compliant traceability records The PatientLicenseNumber and/or CaregiverNumber that was recorded on the original receipt should be on the new return receipt. This is critical in states where recurring purchase allotments are programmatically governed; Returns can be processed even if the original sale has been finalized. Returns can be processed even if the original package has been consumed.  Refund options Refunds There are two methods to make a refund - cash and account credit.\nThe manager has the ability to choose cash as the refund method instead of the default method, account credit. This functionality allows issuing cash refunds to customers in cases where an account credit refund isn\u0026rsquo;t acceptable.\nThe refund method will always default to \u0026ldquo;Account Credit.\u0026rdquo; Changing the refund method to \u0026ldquo;Cash\u0026rdquo; will require a manager pin approval every time. When a refund is processed via cash, the till will need to be updated with a transaction to reflect the outgoing cash.\nAPI Calls GET go_api/grow/order/refundtypes - get all available refund methods\nPOST go_api/grow/facilities/${facility_id}/refund - create a new transaction, initiate refund\nGET go_api/grow/facilities/${facility_id}/order/${order_id}/refunds - get refunded items for current order\nValidation  Customer can\u0026rsquo;t refund more than the initial purchase amount; Returns possible infinite amount of time; If customer refunded the purchase, the same transaction can\u0026rsquo;t be voided; Partial returns are possible; When multiples of an item are purchased, the sale cannot be partially returned. Example: A client wants to return one of two prerolls that they bought. He will need to return both joints;  ","excerpt":"Whether a purchase is made in physical store or online (via Credit Card, LINX, or CanPay) the …","ref":"https://vs-work.github.io/flourish-user-docs/docs/pos/payment/refunds/","title":"Returns \u0026 Refunds"},{"body":" Marijuana Customer Status Validation This article will walk through the identity verification process for Customers within the Flourish system, to check, whether the Customer is eligible to purchase Marijuana containing products or not.\nGlossary Here are some quick definitions of relevant terms:\nCustomer represents an individual that intends to make a purchase of any kind of products through Flourish system.\nThe main difference between medical cannabis and recreational cannabis is the Cannabidiol (CBD) and Tetrahydrocannabinol (THC) content, the active ingredients in marijuana:\nRecreational marijuana has more THC content than the medicinal CBD, THC is responsible for making users feel high.\nMedical marijuana with a high content of CBD, proven to have anti-inflammatory, anti-anxiety, anti-oxidant, anti-carcinogenic and antipsychotic properties.\nUnderage The legal age for using recreational marijuana is 21, while the legal age for medical marijuana is 18. In Flourish, customer is considered underage if he is younger than 21. For Customers under the age of 18 with a qualifying medical condition, obtaining a medical card requires two physician recommendations and a parent/guardian approval.\nMMID A medical cannabis card (MMID) or medical marijuana (MMJ) card is a state issued identification card that enables a patient with a doctor\u0026rsquo;s recommendation to obtain, possess, or cultivate cannabis for medicinal use despite marijuana\u0026rsquo;s lack of the normal Food and Drug Administration testing for safety and efficacy.\nCustomer Eligibility Flourish has two 2 customer verification statuses - Verified / Not verified. Verified can be of 2 types - Medical \u0026amp; Recreational. Not Verified can be of 3 types - Recreational, Underage, Not Verified.\nNote: It is important where the customer\u0026rsquo;s Medical Card is issued, as it depends on whether he/she can buy cannabis goods or not. This can be seen in the \u0026ldquo;Medical Card is issued in the facility\u0026rsquo;s state\u0026rdquo; column in the table below. To get a clear understanding of state regulations\nCustomer status can be viewed or changed inside the POS application in his or her profile, as seen on the image\nSource code reference POS:\nAll customer verification is checked using the getCustomerVerification function in auth.service.ts\nWEB:\nAll customer verification is checked using getCustomerVerification function inside customer-auth.service service\nDatabase level reference Customer status is stored in the Company Level database, inside customer table there is the is_verified column.\nPOS Authentication Token Life Cycle Authentication is a part of customer validation. In this part of an article, we will delve into the differences between WEB and POS modules authentication pipeline and, token lifecycle.\nLog in:\nPOS module authentication system has two tokens - terminal_token and token. When customer logs in using email+password combination, we set both terminal_token and token to the same value, and after that, if PIN login is used, we leave the terminal_token alone but replace the token with the new one for the PIN\u0026rsquo;ned-in user.\nLog out:\nWhen customer decides to log out, the auth logout function checks both terminal_token and token tokens, and if they are\n Different: customer is then redirected to PIN-request page and token becomes equal to the terminal_token;\n Same: then both terminal_token and token are deleted and customer log all the way out to the email login screen.\n  ","excerpt":"Marijuana Customer Status Validation This article will walk through the identity verification …","ref":"https://vs-work.github.io/flourish-user-docs/docs/customer-validation/","title":"Validation Rules"},{"body":" Problematic transaction can be voided—even though it hasn\u0026rsquo;t settled. Since the transaction is pending and has not cleared the customer\u0026rsquo;s account, it means the sale can be prevented from going through.\nGlossary  Void transaction: Transaction that is canceled by a merchant or vendor before it settles through a consumer\u0026rsquo;s debit or credit card account. It may appear as a pending transaction when the customer checks their account online.  Understanding void transactions When a transaction takes place, the merchant swipes the customer\u0026rsquo;s debit or credit card. If there are enough funds in the customer\u0026rsquo;s account, the terminal authorizes the transaction. But the transaction is not fully settled, as payment has to be released from the customer\u0026rsquo;s account to the merchant.\nIf there is a problem with the transaction, it can be voided—even though it hasn\u0026rsquo;t settled. Since the transaction is pending and has not cleared the customer\u0026rsquo;s account, it means the sale can be prevented from going through.\nIn order to void the transaction, the customer must contact the merchant and request the transaction be reversed. Once it is voided, the transaction will show up on the customer\u0026rsquo;s account as a pending transaction, which disappears after a certain amount of time.\nThe hold can last anywhere from 24 hours to several days, causing the customer an inconvenience because he or she won’t be able to access the money during that time.\nA void transaction takes place on the same day as the original transaction.\nVoiding transactions The manager can void cash and manual payment transactions in POS on the same day they occur. This allows for correcting human errors when a cash payment, manual LINX, or manual CanPay payment is recorded incorrectly.\nTransaction history On purchases that have transactions, there is a \u0026ldquo;Transactions History\u0026rdquo; button inside of POS. When this button is selected, a modal will open showing a transaction history table that is similar to the transaction history table on the web. Next to \u0026ldquo;Cash\u0026rdquo; and \u0026ldquo;Manual Payments\u0026rdquo;, there is a \u0026ldquo;Void\u0026rdquo; button/link. The void button/link appears only on \u0026ldquo;Cash\u0026rdquo; and \u0026ldquo;Manual Payment\u0026rdquo; transactions, on transactions that occurred today, on transactions that occurred at the same facility the user is currently authenticated, and for transactions that hasn’t been voided already. When the void link is selected the void transaction modal will be shown.\nWhen the void link on the POS transaction history modal is selected, the user will see this void transaction modal. A manager (permission based) reviews the transaction details, will enter their pin, and will select \u0026ldquo;Submit\u0026rdquo; button, to void the transaction. After submitting, the screen gos to the \u0026ldquo;create payment\u0026rdquo; screen with the balance due reflecting the recently voided transactions.\nAPI Calls GET go_api/grow/report/transactions - gets all transactions which were made during the purchase; POST go_api/retail/payments/${transactionId}/void - void a particular transaction;\nValidation  The void functionality is available only for the transaction, which:  Has \u0026ldquo;Cash\u0026rdquo; or \u0026ldquo;Manual Payment\u0026rdquo; payment method; Transactions older than one day can\u0026rsquo;t be voided; Occur at the same facility the customer is currently authenticated; Hasn\u0026rsquo;t been voided already; If there is no returned item in the purchase; Facility ID returned from processRequest transaction should be the same as the facility ID on the original order payment transaction record If there is at least one refund transaction in the order, voiding transactions in this order becomes impossible.   ","excerpt":"Problematic transaction can be voided—even though it hasn\u0026rsquo;t settled. Since the transaction is …","ref":"https://vs-work.github.io/flourish-user-docs/docs/pos/payment/voids/","title":"Void Transactions"},{"body":" This is a typical blog post that includes images.\nThe front matter specifies the date of the blog post, its title, a short description that will be displayed on the blog landing page, and its author.\nIncluding images Here\u0026rsquo;s an image (featured-sunset-get.png) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA\n  The front matter of this post specifies properties to be assigned to all image resources:\nresources: - src: \u0026quot;**.{png,jpg}\u0026quot; title: \u0026quot;Image #:counter\u0026quot; params: byline: \u0026quot;Photo: Riona MacNamara / CC-BY-CA\u0026quot;  To include the image in a page, specify its details like this:\n Fetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA\n   The image will be rendered at the size and byline specified in the front matter.\n","excerpt":"This is a typical blog post that includes images.\nThe front matter specifies the date of the blog …","ref":"https://vs-work.github.io/flourish-user-docs/blog/2018/10/06/easy-documentation-with-docsy/","title":"Easy documentation with Docsy"},{"body":" Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header    There\u0026rsquo;s a horizontal rule above and below this.\nHere is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid \u0026lsquo;N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\nCreate a sample markdown document Add task lists to it Take a vacation  And a \u0026ldquo;mixed\u0026rdquo; task list:\nSteal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine  TMNT  Leonardo Michelangelo Donatello Raphael   Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green  Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin\u0026rsquo; Somethin\u0026rsquo;, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let\u0026rsquo;s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I\u0026rsquo;m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026amp; Stealin, The New Style, She\u0026rsquo;s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill    Code snippets like var foo = \u0026quot;bar\u0026quot;; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \u0026quot;bar\u0026quot;; bar := \u0026quot;foo\u0026quot;;  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \u0026#34;bar\u0026#34;;` lexer := lexers.Get(\u0026#34;javascript\u0026#34;) iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\u0026#34;github\u0026#34;) formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026amp;buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \u0026quot;bar\u0026quot;;   Ruby foo = \u0026quot;bar\u0026quot;{    Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts  This is an alert.  Note: This is an alert with a title.  This is a successful alert.  This is a warning!  Warning! This is a warning with a title!  Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this.  ","excerpt":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered …","ref":"https://vs-work.github.io/flourish-user-docs/blog/2018/10/06/the-second-blog-post/","title":"The second blog post"},{"body":" Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header    There\u0026rsquo;s a horizontal rule above and below this.\nHere is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid \u0026lsquo;N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\nCreate a sample markdown document Add task lists to it Take a vacation  And a \u0026ldquo;mixed\u0026rdquo; task list:\nSteal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine  TMNT  Leonardo Michelangelo Donatello Raphael   Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green  Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin\u0026rsquo; Somethin\u0026rsquo;, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let\u0026rsquo;s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I\u0026rsquo;m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026amp; Stealin, The New Style, She\u0026rsquo;s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill    Code snippets like var foo = \u0026quot;bar\u0026quot;; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \u0026quot;bar\u0026quot;; bar := \u0026quot;foo\u0026quot;;  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \u0026#34;bar\u0026#34;;` lexer := lexers.Get(\u0026#34;javascript\u0026#34;) iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\u0026#34;github\u0026#34;) formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026amp;buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \u0026quot;bar\u0026quot;;   Ruby foo = \u0026quot;bar\u0026quot;{    Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts  This is an alert.  Note: This is an alert with a title.  This is a successful alert.  This is a warning!  Warning! This is a warning with a title!  Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this.  ","excerpt":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered …","ref":"https://vs-work.github.io/flourish-user-docs/blog/2018/01/04/another-great-release/","title":"Another Great Release"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/docs/pos/payment/","title":"Payments"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/index.json","title":""},{"body":"  #td-cover-block-0 { background-image: url(/flourish-user-docs/about/featured-background_hu9755aec5d950aee448b9589da2945de7_136038_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/flourish-user-docs/about/featured-background_hu9755aec5d950aee448b9589da2945de7_136038_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About Flourish A sample site for showing off how awesome Hugo docs could be        How do you guys lining new Flourish docs home? :3     More Content Here      Wanna add anything? This goes here     ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"https://vs-work.github.io/flourish-user-docs/about/","title":"About Flourish"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will …","ref":"https://vs-work.github.io/flourish-user-docs/blog/","title":"Docsy Blog"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/community/","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/flourish-user-docs/featured-background_hu9755aec5d950aee448b9589da2945de7_136038_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/flourish-user-docs/featured-background_hu9755aec5d950aee448b9589da2945de7_136038_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to Flourish Documentation: Home to all your cannabis growing needs! User Documentation   Developer Documentation   The seed to sale solution made for cultivators, manufacturers, distributors, and retailers.\n          Whether you are an independent cultivator, vertically integrated, or multi-state operator, Flourish captures and centralizes critical business data, automates processes, and provides advanced analytics and reporting that nourishes your businesses growth.       Continuously Flourish! We love our docs clean, simple to follow and always up to date\nPlease follow this space for updates!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n   Follow us on Twitter! For announcement of latest features etc.\nRead more …\n     More on Flourish        Cultivators Increase yields, optimize your cultivation operating procedures and easily track your plants’ entire lifecycle, from seed to sale.\n   Manufacturers Standardize your proprietary run processes and manage your entire facility including machines, ingredients and non-cannabis inventory.\n   Distributors Build strong relationships with partners and vendors and efficiently deliver products with driver, vehicle and sales rep tracking.\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://vs-work.github.io/flourish-user-docs/","title":"Flourish Documentation"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/docs/pos/","title":"POS Related Documentation"},{"body":"","excerpt":"","ref":"https://vs-work.github.io/flourish-user-docs/search/","title":"Search Results"}]